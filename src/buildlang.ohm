BuildLang {
	Program		= Stmt+

    Stmt 		= VarDecl
	            | FunDecl
				| Assignment
				| Primary ("++" | "--")                            	     	   -- bump
    			| Say
				| FunCall 
                | IfStmt
				| LoopStmt
				| break                                            	     	   -- break
				| send Exp                                                     -- return
                | send                                                         -- shortreturn

	VarDecl 	= type id "=" Exp 
	type 		= ("$")? (int | float | string | bool | void)                  -- read_only_symbol
	FunDecl 	= (async)? block id "(" ListOf<Param, ","> ")" (sends TypeArray)? ":" StmtBlock? 
    Param       = TypeArray id
    TypeArray   = ("[")* type ("]")* 
    Assignment 	= NonemptyListOf<id, ","> "=" NonemptyListOf<Exp, ",">	       -- multipleAssignment
    			| id "=" Exp							               	       -- assignment
    Say 		= say "(" Args ")"
	FunCall     = Exp "(" Args ")" 
    Args		= ListOf<(Exp | stringlit), ",">
    IfStmt 		= if Exp ":" StmtBlock Else?
    Else		= else IfStmt                                                  -- else_if
    			| else ":" StmtBlock                                           -- else
	LoopStmt    = while Exp ":" StmtBlock                     	     	       -- while
				| stack Exp ":" StmtBlock                     	     	       -- repeat
				| for id in Exp ("..." | "..<") Exp ":" StmtBlock	  	       -- range
                | for id in Exp ":" StmtBlock                  	     	       -- collection

    StmtBlock   = indent Stmt+ dedent 
    
	Exp         = Exp1 ("||" Exp1)+                  	          	     	   -- or
                | Exp1 ("&&" Exp1)+                    	          	     	   -- and
				| Exp1 
	Exp1        = Exp2 ("<="|"<"|"=="|"!="|">="|">") Exp2 	     	     	   -- compare
				| Exp2
    Exp2        = Exp3 relop Exp3					     	     	     	   -- comparison
    			| Exp3
  	Exp3        = Exp3("+" | "-") Term                	        	     	   -- binary
              	| Term
  	Term        = Term ("*" | "/" | "%") Factor       	         	     	   -- binary
  	            | Factor
  	Factor      = Pipe "**" Factor                  	         	     	   -- binary
  	            | "-" Pipe                           	         	     	   -- negation
              	| Pipe
	Pipe        = Pipe "<|" Primary                	            	     	   -- left_pipe_forward
				| Primary "|>" Pipe                 	        	     	   -- right_pipe_forward
				| Primary
  	Primary     = true ~mut
				| false ~mut
				| floatlit ~mut
				| intlit ~mut
				| stringlit ~mut
				| Primary ("(" | "?(") ListOf<Exp, ","> ")" ~mut               -- call
              	| Primary ("[" | "?[") Exp "]"                                 -- subscript
             	| Primary ("." | "?.") id                                      -- member
             	| stringlit ~mut
              	| numeral                              	        	           -- num
              	| id                                   	        	     	   -- id
              	| TypeArray "(" ")" ~mut                                       -- emptyarray
                | "[" NonemptyListOf<Exp, ","> "]" ~mut                        -- arrayexp
                | "(" Exp ")" ~mut                                             -- parens
    
    relop		= "<=" | "<" | ">=" | ">" | "==" | "!="
    numeral     = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  	say       	= "say" ~idchar
    break       = "break" ~idchar
    if       	= "if" ~idchar
    else       	= "else" ~idchar
    while       = "while" ~idchar
	for 	    = "for" ~idchar
	async       = "async" ~idchar
	block 		= "block" ~idchar
	send 	    = "send" ~idchar
	sends       = "sends" ~idchar
	stack 	    = "stack" ~idchar
	in 	     	= "in" ~idchar
	int 	    = "int" ~idchar
	float 	    = "float" ~idchar
	string 	    = "string" ~idchar
	bool 	    = "bool" ~idchar
	void 	    = "void" ~idchar
	true 	    = "true" ~idchar
	false 	    = "false" ~idchar
    keyword		= say | break | if | else | while  
	            | async | block | send | sends | stack | for | in 
				| int | float | string | bool | void | true | false

	indent      =  "⇨"
	dedent      =  "⇦"

	intlit      = digit+
	floatlit    = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
	mut         = ~"==" "=" | "++" | "--"
  	idchar      = letter | digit | "_"
  	id          = ~keyword letter idchar*
  	space      	+= "//" (~"\n" any)*                      -- comment   
    stringlit 	=  "\"" char* "\""
	char 		= ~control ~"\\" ~"\"" any
				| "\\" ("n" | "t" | "\"" | "\\")          -- escape
				| "\\u{" hex hex? hex? hex? hex? hex? "}" -- codepoint
				| "\\'"                                   -- single_quote
				| "\\\""                                  -- double_quote
				| "\\n"                                   -- newline
				| "\\" any                                -- break
				| ~"\"" any                               -- chars
	control     = "\x00".."\x1f" | "\x80".."\x9f"
    hex         = hexDigit

}