BuildLang {
	Program		= Stmt+

    Stmt 		= VarDecl
	            | FunDecl
				| Assignment
    			| Say
                | IfStmt
				| LoopStmt
				| break                                            	     	   -- break
				| Primary ("++" | "--")                            	     	   -- bump

	VarDecl 	= (const)? type id "=" Exp 
	type 		= int | float | string | bool | void
	FunDecl 	= (async)? block id "(" ListOf<id, ","> ")" (sends id)? ":" StmtBlock 
    Assignment 	= NonemptyListOf<id, ","> "=" NonemptyListOf<Exp, ",">	       -- multipleAssignment
    			| id "=" Exp							               	       -- assignment
    Say 		= say "(" Args ")"
    Args		= ListOf<(Exp | stringlit), ",">
    IfStmt 		= if Exp StmtBlock Else?
    Else		= else IfStmt
    			| else StmtBlock
	LoopStmt    = while Exp StmtBlock                         	     	       -- while
				| stack Exp StmtBlock                        	     	       -- repeat
				| for id in Exp ("..." | "..<") Exp StmtBlock	     	       -- range
                | for id in Exp StmtBlock                     	     	       -- collection

    StmtBlock   = indent Stmt+ dedent 
    
	Exp         = Exp1 ("||" Exp1)+                  	          	     	   -- or
                | Exp1 ("&&" Exp1)+                    	          	     	   -- and
				| Exp1 
	Exp1        = Exp2 ("<="|"<"|"=="|"!="|">="|">") Exp2 	     	     	   -- compare
				| Exp2
    Exp2        = Exp3 relop Exp3					     	     	     	   -- comparison
    			| Exp3
  	Exp3        = Exp3("+" | "-") Term                	        	     	   -- binary
              	| Term
  	Term        = Term ("*" | "/" | "%") Factor       	         	     	   -- binary
  	            | Factor
  	Factor      = PipeFwd "**" Factor                 	         	     	   -- binary
  	            | "-" PipeFwd                         	         	     	   -- negation
              	| PipeFwd
	PipeFwd     = PipeFwd "<|" Primary                 	        	     	   -- left_pipe_forward
				| Primary "|>" PipeFwd                 	        	     	   -- right_pipe_forward
				| Primary
  	Primary     = id "(" ListOf<Exp, ","> ")"          	        	     	   -- call
              	| numeral                              	        	           -- num
              	| id                                   	        	     	   -- id
              	| "(" Exp ")"                          	        	     	   -- parens
    
    relop		= "<=" | "<" | ">=" | ">" | "==" | "!="
    numeral     = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  	say       	= "say" ~idchar
    break       = "break" ~idchar
    if       	= "if" ~idchar
    else       	= "else" ~idchar
    while       = "while" ~idchar
	for 	    = "for" ~idchar
	async       = "async" ~idchar
	block 		= "block" ~idchar
	const  	    = "const" ~idchar
	sends       = "sends" ~idchar
	stack 	    = "stack" ~idchar
	in 	     	= "in" ~idchar
	int 	   = "int" ~idchar
	float 	   = "float" ~idchar
	string 	   = "string" ~idchar
	bool 	   = "bool" ~idchar
	void 	   = "void" ~idchar
    keyword		= say | break | if | else | while  
	            | async | block | const | sends | stack | for | in 
				| int | float | string | bool | void

	indent      =  "⇨"
	dedent      =  "⇦"

  	idchar      = letter | digit | "_"
  	id          = ~keyword letter idchar*
  	space      	+= "//" (~"\n" any)*       -- comment   
    stringlit 	=  "\"" char* "\""
    char 		= "\\'"                    -- single_quote
         		| "\\\""                   -- double_quote
         		| "\\n"                    -- newline
         		| "\\" any                 -- break
         		| ~"\"" any                -- chars

}