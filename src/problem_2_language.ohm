Language_Problem_2 {
    Program = FunDecl* Exp

    FunDecl = func id Params* Body
    Params = "(" ListOf<id, ","> ")"
    Body = NonemptyListOf<Exp, ";"> end

    Exp     = "(" Exp Exp1 "!" ")"            -- factorial
            | Exp1
    Exp1    = "(" Exp1 "!" Exp2 ")"           -- negation
            | Exp2
    Exp2    = "(" Exp2 ("*" | "/") Exp3 ")"   -- multiplicative_ops
            | Exp3
    Exp3    = "(" Exp3 ("+" | "-") Exp4 ")"   -- additive_ops
            | Exp4
    Exp4    = "(" ConditionalStmt ")"         -- conditional
            | Primary
    Primary = "(" Exp ")"                     -- primary
            | numlit                          -- numlit
            | stringlit                       -- stringlit
            | id                              -- id
            | Funcall                         -- funcall

    ConditionalStmt = "if" Exp "then" Exp "else" Exp

    func = "func" ~idchar
    int = "int" ~idchar 
    string = "string" ~idchar
    bool = "bool" ~idchar
    float = "float" ~idchar
    if = "if" ~idchar
    then = "then" ~idchar
    else = "else" ~idchar
    keyword = func | int | string | bool | float | if | then | else
    idchar = alnum | "_" 

    numlit = digit+ ("." digit+)? (("e" | "E") ("+" | "-")? digit+)?
    stringlit = "\"" char* "\"" 
    char = "\\u{" hexdigit+ "}"     -- with_id
         | "\\'"                    -- single_quote
         | "\\\""                   -- double_quote
         | "\\n"                    -- newline
         | "\\" any                 -- break
         | ~"\"" any                -- chars
    hexdigit = digit | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"
    id = ~keyword (letter | "@") (letter | digit | "_" | "@" | "$")*
    Funcall = id "[" ListOf<Exp, ","> "]"

    comment = "--" (~"\n" any)* "\n"
}